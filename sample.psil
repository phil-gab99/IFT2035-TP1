;;; Quelques exemples.              -*- mode: lisp-data; coding: utf-8 -*-

2                                       ; ↝ 2
+                                       ; ↝ <fun +>
(call (call + 3) 6)                     ; ↝ 9
(call + 2 4)                            ; ↝ 6

(hastype (call + 1 5) Int)              ; ↝ 6

(call (hastype (fun x x)
               (Int -> Int))
      3)                                ; ↝ 3

(call (call (hastype (fun x (fun y (call * x y))) (Int -> (Int -> Int)))
            3)
      5)                                ; ↝ 15

(call (call (hastype (fun x y (call * x y)) (Int Int -> Int))
            3)
      5)                                ; ↝ 15

(tuple 2 3)                             ; ↝ [2 3]

(let (x 1) x)                           ; ↝ 1

(hastype (fetch (tuple 1 42) (x y) (call + x y)) Int) ; ↝ 43

(hastype (if (call <= 0 42)
             (call = 0 0)
           (call = 0 1))
         Bool)                          ; ↝ true

(let (true (call = 0 0))
     (false (call = 0 1))
     (not (x Bool) Bool (if x false true))
  (hastype (if (call not (call not (call <= 42 0)))
               true false)
           Bool))                       ; ↝ false

(let (* +) (/ -) (call * 5 (call / 3 1))) ; ↝ 7

(let (plus1 (call plus 1))
     (plus (x Int) (Int -> Int) (fun y (call + y x)))
  (call plus1 5))                       ; ↝ 6
